(define l-and (lambda (a b)
                (* a b)
))
(define l-not (lambda (a)
                (if (= a 0) 1 0)
))
(define l-or (lambda (a b)
                  (if (> (+ a b) 0) 1 0)
))
(define l-xor (lambda (a b)
                (abs (- a b))              
))
(define fulladdr (lambda ( a b cin)
                      (cons (l-xor (l-xor a b) cin) (l-or (l-and (l-or a b) cin) (l-and a b)))
))
(define last (lambda (listt)
               (car (reverse listt))
))
(define removeLast (lambda (listt1)
               (reverse (cdr (reverse listt1)))
))
(define n-bit-addr (lambda (list0 list1 cin1)
                     (if (null? list0)
                         (cons '() cin1)
                         (let ((x (fulladdr (last list0) (last list1) cin1)))
                           (let ((y (n-bit-addr (removeLast list0) (removeLast list1) (cdr x))))
                             (cons (append (car y) (list (car x))) (cdr y)) 
)))))
                     


